<?php

/**
 *
 * Simple Tree Menu Module 1.0.0
 *
 * @author Soma, with code based by Apeisa, Ryan.
 *
 * @date_created 08/03/2012
 * @last_modified 08/03/2012
 *
 * ProcessWire 2.x 
 * Copyright (C) 2011 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

/*



INSTALL:
----------------------------------------------------------------------------------------------------------
Simple Module to render tree menu. Go to your module Install page and click "Check for new modules".
It will appear under the section Markup. Click "install" button. Done.


BASIC USAGE:
----------------------------------------------------------------------------------------------------------

Once installed a new template variable is available called "$treeMenu" to render the menu.

Simplest is to call with no options. It will render a ul markup tree on all levels expanded from the
root page "/". Containing "parent" and "current" class attributes on anchors by default.

echo $treeMenu->render();


ADVANCED CALL WITH ALL OPTIONS AVAILABLE:
----------------------------------------------------------------------------------------------------------

$options = array(
	'collapsed' => false, // bool: if you want to auto-collapse the tree (in markup) you set this to true
	'css_current' => 'on', // string: overwrite current class
	'css_parent' => 'is_parent', // string: overwrite class name for parent levels
	'css_levels_on' => true, // bool: wether to output "level-1, level-2, ..." as css class in links
	'ul_id' => 'mainnav', // string: set a id name for the topmost ul element
	'ul_class' => 'mainnav' // string: set a class name for the topmost ul element
)
echo $treeMenu->render($options);



OVERWRITE CURRENT PAGE AND ROOTPAGE:
----------------------------------------------------------------------------------------------------------

If you want to overwrite starting point for the root page to be another page you could do it like this:

$rootPage = $pages->get("/en/"); // or any other page that has subpages
echo $treeMenu->render(null, null, $rootPage); // null at first is to not have to specify options, just use default

Or to even overwrite the current active page

$currentPage = $pages->get(1242); // or any other page object 
$rootPage = $pages->get("/en/"); // or any other page that has subpages
echo $treeMenu->render(null, $currentPage, $rootPage); // null at first is to not have to specify options, just use default




OUTPUT EXAMPLE:
----------------------------------------------------------------------------------------------------------

<ul class='mainnav' id='mainnav'>
	<li>
		<a class='level-1 is_parent' href='/about/'>About22</a>
		<ul>
			<li>
				<a class='level-2' href='/about/what/'>Child page example 1</a>
			</li>
			<li>
				<a class='level-2 on' href='/about/background/'>Child page example 2</a>
			</li>
			<li>
				<a class='level-2' href='/about/test/'>test</a>
				<ul>
					<li>
						<a class='level-3' href='/about/test/test2/'>test2</a>
					</li>
				</ul>
				
			</li>
		</ul>
		
	</li>
	<li>
		<a class='level-1' href='/templates/'>Templates</a>
	</li>
	<li>
		<a class='level-1' href='/site-map/'>Site Map</a>
	</li>
</ul>



JS MENUS, CSS, MARKUP TEMPLATES
----------------------------------------------------------------------------------------------------------

This module will only output the basic HTML markup. No styling or script are added.

Using this output together with the right css or js plugin, you can quickly produce any working 
multilevel navigation. This is up to you. There's also currently no way to define your own markup.
Although you could do a str_replace to change simple things, since it returns a string this is possible.
Or use js to modify, add prefixes or wrap elements.


*/

class MarkupSimpleNavigation extends WireData implements Module {
	
	public static $defaultOptions = array(
		'css_parent' => 'parent',
		'css_current' => 'current',
		'css_levels_on' => false,
		'collapsed' => false,
		'ul_id' => '',
		'ul_class' => ''
	);


	public static function getModuleInfo() {
		return array(
			'title' => "Markup for simple nested navigation",
			'summary' => 'Module to render simple nested ul tree of the site structure. Simple use: $page->treeMenu(), or specify own current $page and custom $rootPage: $page->treeMenu($page, $rootPage)',
			'version' => 100,
			'href' => '',
			'autoload' => true,
			'singular' => true
		);
	}
	
	public function init() {
		$this->fuel->set('treeMenu', $this );
		$this->set('level',0);
	}


	/**
	* 
	*	Main method called ony pages by echo $treeMenu->render(); to render
	*	init tree rendering, merge options with defaults
	*
	*/ 
	public function render( Array $options = null, Page $page = null, Page $rootPage = null ) {

		if($options != null && is_array($options)){
			$options = array_merge(self::$defaultOptions, $options);
		} else {
			$options = self::$defaultOptions;
		}
		return $this->_renderTree( $options, $page, $rootPage );
	}


	/**
	*
	* 	Render the tree method
	*
	*/
	private function _renderTree( $options, $page, $rootPage ){

		$this->level++;

		if(is_null($page)) $page = wire('page');
		if(is_null($rootPage)) $rootPage = wire('pages')->get('/');

		$ul_class = '';
		$ul_id = '';
		if($options['ul_class'] != '') $ul_class = " class='".$options['ul_class']."'";
		if($options['ul_id'] != '') $ul_id = " id='".$options['ul_id']."'";

		if($this->level == 1) $out = "\n<ul$ul_class$ul_id>";
			else  $out = "\n<ul>";

		$parents = $page->parents;

		foreach($rootPage->children as $child) {

				$s = '';
				
				if($options['css_levels_on']) $class = " level-" . count($child->parents);
					else $class = '';
				
				if(!$options['collapsed']){
					
					if($parents->has($child)) {
						$class .= " " . $options['css_parent'];
					}
					else if($child === $page){
						$class .= " " . $options['css_current'];
					}
					if($child->numChildren){
						$s = str_replace("\n", "\n\t\t", $this->_renderTree($options, $page, $child));
					}
				} 
				else
				{
					if($child->numChildren && $parents->has($child)) {
						$class .= " " . $options['css_parent'];
						$s = str_replace("\n", "\n\t\t", $this->_renderTree($options, $page, $child));

					} else if($child === $page) {
						$class .= " " . $options['css_current'];
						if($page->numChildren) $s = str_replace("\n", "\n\t\t", $this->_renderTree($options, $page, $child));
					}
				}
				
				$class = substr($class,1);

				if(strlen($class) > 0) {
					$class = " class='$class'";
				}
				
				$out .= "\n\t<li>\n\t\t<a$class href='{$child->url}'>{$child->title}</a>$s\n\t</li>";
		}

		$out .= "\n</ul>\n";
		return $out;
	}
}